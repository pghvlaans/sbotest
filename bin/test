#!/usr/bin/perl
#
# vim: ts=4:noet
#
# sbotest (test script)
# sbotools-based reverse dependency build tester
#
# author: K. Eugene Carlson <kvngncrlsn@gmail.com>
# license: MIT License

my $SBOTEST_VERSION = "1.1";

use 5.016;
use strict;
use warnings;

use SBO::Lib qw/ :config :const auto_reverse build_cmp check_x32 check_x64 check_multilib get_readme_contents get_inst_names get_installed_packages get_sbo_build_number get_sbo_version get_user_group user_group_exist $conf_file get_sbo_location get_all_available get_build_queue get_full_reverse get_reverse_reqs in is_local lint_sbo_config on_blacklist rationalize_queue slurp solib_check uniq version_cmp error_code usage_error script_error @concluded @reverse_concluded $slackbuilds_txt /;

use Cwd;
use File::Basename;
use File::Copy;
use File::Path qw/ make_path /;
use Getopt::Long qw/ :config no_ignore_case_always bundling /;

my $self = "sbotest";

# $sbotest_compatible is exported from SBO::Lib::Util.pm; if
# it is not present, the sbotools version is too old
usage_error("The installed sbotools version is incompatible.\n\nUpgrade to 3.7 or 20250702-1cd4031 at the earliest. Exiting.") unless defined $sbotest_compatible;

# for --dry-run
our (@to_remove, @to_reuse, @in_overrides, @dry_run_list);

my $multilib_ready = check_multilib();

my ($help, $version, $pkgdir, $sbo_archive, $jobs, $single, $full_reverse, $logdir, $archive_rebuild, $strict_upgrades, $dry_run, $no_archive, $archive_force, $archive_reverse, $so_check);

GetOptions(
	'help|h'              => \$help,
	'version|v'           => \$version,
	'pkg-dir|k=s'         => \$pkgdir,
	'sbo-archive|A=s'     => \$sbo_archive,
	'full-reverse|f'      => \$full_reverse,
	'single|s'            => \$single,
	'jobs|j=s'            => \$jobs,
	'log-dir|l=s'         => \$logdir,
	'archive-rebuild'     => \$archive_rebuild,
	'archive-reverse'     => \$archive_reverse,
	'strict-upgrades|S=s' => \$strict_upgrades,
	'dry-run|D'           => \$dry_run,
	'no-archive'          => \$no_archive,
	'archive-force'       => \$archive_force,
	'so-check|X=s'        => \$so_check,
);

usage_error("Non-root users can only call sbotest with -h, -v, -D and listing options. Exiting.") unless $< == 0 or $dry_run or $help or $version;

$archive_rebuild = $archive_reverse if $archive_reverse;

$config{SBO_ARCHIVE} = defined $sbo_archive ? $sbo_archive : $config{SBO_ARCHIVE};
my $archive_dir = $config{SBO_ARCHIVE};

$config{JOBS} = defined $jobs ? $jobs : $config{JOBS};
$config{PKG_DIR} = defined $pkgdir ? $pkgdir : $config{PKG_DIR};
$config{LOG_DIR} = defined $logdir ? $logdir : $config{LOG_DIR};
$config{STRICT_UPGRADES} = defined $strict_upgrades ? $strict_upgrades : $config{STRICT_UPGRADES};
$config{SO_CHECK} = defined $so_check ? $so_check : $config{SO_CHECK};

show_usage() if $help;
show_version() if $version;

usage_error("full-reverse is incompatible with single. Exiting.") if $single and $full_reverse;
usage_error("archive-rebuild, no-archive and archive-force are incompatible. Exiting.") if ($archive_rebuild and ($no_archive or $archive_force)) or ($no_archive and $archive_force);

lint_sbo_config($self, %config);

my ($available, $all_fulldeps, @to_test, @rebuild_target);
my @available = get_all_available();

# nothing installed at the beginning of the test
# run will be uninstalled during it
my $inst_sbos = get_inst_names(get_installed_packages('SBO'));

sub show_usage {
	print <<"EOF";
Pull:      $self pull [-B|-r]

  --git-branch|-B [BRANCH|FALSE]:
    use this git branch; with FALSE, use the default.
  --repo|-r [URL|FALSE]:
    pull from this repository URL; with FALSE, use the default.

Configure: $self config [sboconfig options]
           $self hints [sbohints options]

Search:    $self find [sbofind options]

Usage:     $self [options] sbo ...
           $self [-h|-v]

Options:
  --help|-h:
    this screen.
  --version|-v:
    sbotest version information.
  --dry-run|-D:
    report on potential operations.
  --full-reverse|-f:
    test the full reverse dependency tree.
  --jobs|-j [FALSE|#]:
    set the number of jobs to use, or ignore the JOBS setting.
  --log-dir|-L [FALSE|/path]:
    save log files under this path, appending a timestamp.
  --pkg-dir|-k [FALSE|/path]:
    save built packages under this path, appending a timestamp.
  --strict-upgrades|-S [FALSE|TRUE]:
    with --archive-rebuild, delete only out-of-date packages.
  --sbo-archive|-A [FALSE|/path]:
    reinstall saved packages from this path.
  --so-check|-X [FALSE|TRUE]:
    conduct missing shared object checks upon test failure if TRUE.
  --single|-s:
    do not test reverse dependencies.
  --archive-rebuild:
    replace all outdated packages in the archive.
  --archive-reverse:
    replace outdated packages and their reverse dependencies.
  --no-archive:
    do not save or reuse any packages.
  --archive-force:
    additionally save test targets to the archive.

By default, sbotest builds any requested scripts and the first
level of reverse dependencies, calling /usr/bin/sbopkglint for
testing after after all builds are completed. Built packages
are archived automatically except for test requests and their
reverse dependencies.

EOF
	exit 0;
}

sub show_version {
	say "$self version $SBOTEST_VERSION";
	say "licensed under the MIT License";
	exit 0;
}

# remove any _SBo package installed during the test run and
# not needed for the next build; optionally takes $queue as
# an argument; no return value
sub clean_packages {
	my $queue = shift;
	my $current_sbos = get_inst_names(get_installed_packages('SBO'));
	for my $sbo (@$current_sbos) {
		next if in $sbo, @$inst_sbos;
		if (defined $queue) { next if in $sbo, @$queue; }
		script_error("removepkg failed.") unless system('/sbin/removepkg', '--terse', $sbo) == 0;
	}
}

# find version- and build-mismatched archived packages, provided
# they are not blacklisted or already installed
sub find_outdated {
	script_error("find_outdated requires an argument.") unless @_ == 1;
	my $sbo_archive = shift;
	my (@outdated_prelim, @up_to_date, @outdated);
	my $temp_cwd = getcwd();
	if (-d $sbo_archive) {
		chdir $sbo_archive;
	} else {
		return();
	}
	opendir(my $dh, $sbo_archive);
	while (my $ls = readdir $dh) {
		next if $ls eq "." or $ls eq "..";
		next unless -f $ls;
		my ($pkg_name, $pkg_version, $pkg_build) = get_package_info($ls);
		next unless defined $pkg_name;
		next if in $pkg_name, @$inst_sbos;
		next if on_blacklist($pkg_name);
		unless (not_same_as_repo($pkg_name, $pkg_version, $pkg_build)) {
			push @up_to_date, $pkg_name;
			next;
		}
		push @outdated_prelim, $pkg_name;
		if ($config{STRICT_UPGRADES} eq 'FALSE' or not_same_as_repo($pkg_name, $pkg_version, $pkg_build) lt 0) {
			if ($dry_run) {
				push @to_remove, $ls;
			}
			else {
				say "Unlinking $ls.";
				unlink $ls;
			}
		}
	}
	close $dh;
	for my $cand (@outdated_prelim) {
		push @outdated, $cand unless in $cand, @up_to_date;
	}
	return() unless @outdated;
	return @outdated;
}

# given a package string, returns the name, version and
# build number; if the string does not appear to be an _SBo
# package, return undef
sub get_package_info {
	my $pkg_name = shift;
	script_error("get_package_info requires an argument.") unless defined $pkg_name;
	# make sure the string could name a valid SBo package;
	# see /sbin/makepkg /^# Identify package extension
	return undef unless $pkg_name =~ m/_SBo(|compat32)\.(t[gxlb]z|tar\.([gxl]z|bz2|lzma))$/;
	my @pkg_string = split '-', $pkg_name;
	my $pkg_version = $pkg_string[-3];
	my $pkg_build = $pkg_string[-1];
	$pkg_build =~ s/[\D].*$//;
	$pkg_name =~ s/(-[^-]*){3}$//;
	return ($pkg_name, $pkg_version, $pkg_build);
}

# install any pre-built packages from the test archive that
# meet the following criteria:
#
# - included in the build queue
# - not already in the test archive
# - not a test target
# - not already installed
# - build and version match the local repository
sub install_archived {
	my ($queue, $sbo_archive, $pkg_dir, @to_test) = @_;
	my $temp_cwd = getcwd();
	my $currently_installed = $dry_run ? $inst_sbos : get_inst_names(get_installed_packages('SBO'));
	if (-d $sbo_archive) {
		chdir $sbo_archive;
	} else {
		return();
	}
	opendir(my $dh, $sbo_archive);
	while (my $ls = readdir $dh) {
		next if $ls eq "." or $ls eq "..";
		next unless -f $ls;
		next if -f "$pkg_dir/$ls";
		my ($pkg_name, $pkg_version, $pkg_build) = get_package_info($ls);
		next unless defined $pkg_name;
		next if in $pkg_name, @$currently_installed;
		next unless in $pkg_name, @$queue;
		next if in $pkg_name, @to_test;
		next unless same_as_repo($pkg_name, $pkg_version, $pkg_build);
		if ($dry_run) {
			push @to_reuse, $ls;
		} else {
			script_error("upgradepkg failed.") unless system('/sbin/upgradepkg', '--reinstall', '--install-new', '--terse', $ls) == 0;
		}
	}
	close $dh;
	chdir $temp_cwd;
}

# given the system architecture and a location, return
# 1 if the script is supported and 0 otherwise
sub is_supported {
	my $location = shift;
	return 0 unless defined $arch and defined $location;
	if ($arch =~ /64/ and not $multilib_ready) {
		return 0 if check_x32 $location;
	} elsif ($arch !~ /64/) {
		return 0 if check_x64 $location;
	}
	return 1;
}

# returns 0 if the archived package matches the repo script,
# -1 if the archived package is out-of-date, and 1 if the
# archived package is of a later version
sub not_same_as_repo {
	script_error("not_same_as_repo requires three arguments.") unless @_ == 3;
	my ($pkg_name, $pkg_version, $pkg_build) = @_;
	my $pkg_location = get_sbo_location($pkg_name);
	return 0 unless $pkg_location;
	my $sbo_version = get_sbo_version($pkg_location);
	my $sbo_build = get_sbo_build_number($pkg_location);
	my $res1 = version_cmp($pkg_version, $sbo_version);
	my $res2 = build_cmp($pkg_build, $sbo_build, $pkg_version, $sbo_version);
	return $res1 if $res1;
	return $res2 if $res2;
	return 0;
}

# returns 1 if the archived package matches the repo script;
# not strictly necessary, but improves readability
sub same_as_repo {
	script_error("same_as_repo requires three arguments.") unless @_ == 3;
	return not_same_as_repo(@_) == 0;
}

usage_error("sbotools needs to be installed.") unless -x "/usr/sbin/sboconfig";
usage_error("sbo-maintainer-tools needs to be installed.") unless -x "/usr/bin/sbopkglint";
show_usage() unless @ARGV or $archive_rebuild;

# reminder if no SLACKBUILDS.TXT
usage_error("Use \"sbotest pull\" to fetch the repository. Exiting.") unless -s $slackbuilds_txt;

my $cwd = getcwd();
chomp(my $begin_time = `/usr/bin/date +%Y-%m-%d-%H:%M`);
chomp(my $start_date = `/usr/bin/date`);

my (@missing, @bad_lint, @bad_pkg_lint, @fail_to_build, @successful, @unsupported, @built, @copied, @already_installed, @queue_failed, @solibs);
my $pkg_dir = $config{PKG_DIR} eq 'FALSE' ? "$config{SBO_HOME}/tests/$begin_time-tests" : "$config{PKG_DIR}/$begin_time-tests";
my $log_dir = $config{LOG_DIR} eq 'FALSE' ? "$config{SBO_HOME}/logs/$begin_time-logs" : "$config{LOG_DIR}/$begin_time-logs";
my $logfile = "$config{SBO_HOME}/results/$begin_time.log";

if ($config{LOCAL_OVERRIDES} ne "FALSE") {
	usage_error("$config{LOCAL_OVERRIDES} is specified as the overrides directory, but does not exist. Exiting.") unless -d $config{LOCAL_OVERRIDES};
}
usage_error("the package and archive directories are the same; archive and archive-force are unneeded. Exiting.") if $archive_force and $pkg_dir eq $archive_dir;

if ($archive_rebuild) {
	usage_error("$archive_dir does not exist; exiting.") unless -d $archive_dir;
	$pkg_dir = $archive_dir;
}
unless ($dry_run) {
	make_path($pkg_dir);
	error_code("Creating $pkg_dir failed. Exiting.", _ERR_OPENFH) unless -d $pkg_dir;
	make_path("$config{SBO_HOME}/results") unless -d "$config{SBO_HOME}/results";
	error_code("Creating $config{SBO_HOME}/results failed. Exiting.", _ERR_OPENFH) unless -d "$config{SBO_HOME}/results";
	# this is done after the --archive-rebuild check above because
	# a nonexistent directory is necessarily empty
	make_path($archive_dir) unless -d $archive_dir or $no_archive;
}

unless ($single) {
	$available = +{ map {; $_, $_ } @available };
	$all_fulldeps = get_reverse_reqs($available);
}

FIRST: for my $sbo (@ARGV) {
	last if $archive_rebuild;
	if (in $sbo, @$inst_sbos and ! $single) {
		push @already_installed, $sbo;
		next FIRST;
	}
	my $dir = get_sbo_location($sbo);
	unless (defined $dir and -d $dir) {
		push @missing, $sbo;
		next FIRST;
	}
	chdir $dir;
	unless(is_supported($dir)) {
		push @unsupported, $sbo;
		next FIRST;
	}
	next FIRST if on_blacklist($sbo);
	push @to_test, $sbo;
	splice @reverse_concluded;
	splice @concluded;
	unless ($single) {
		my @available_reverse;
		if ($full_reverse) {
			@available_reverse = get_full_reverse($sbo, $available, $all_fulldeps);
		} else {
			for my $sbo2 (keys %$available) {
				push @available_reverse, $sbo2 if $all_fulldeps->{$sbo}->{$sbo2};
			}
		}
		for my $target (uniq(@available_reverse)) { push @to_test, $target; }
	}
}

if ($archive_rebuild and -d $archive_dir) {
	my @archived_names;
	chdir $archive_dir;
	opendir(my $dh, $archive_dir);
	REBUILD_CHECK: while (my $ls = readdir $dh) {
		next REBUILD_CHECK if $ls eq "." or $ls eq "..";
		my ($pkg_name, $pkg_version, $pkg_build) = get_package_info($ls);
		next REBUILD_CHECK unless defined $pkg_name;
		push @archived_names, $pkg_name if $pkg_name;
	}
	close $dh;
	chdir $cwd;
	@archived_names = uniq(@archived_names) if @archived_names;
	@to_test = find_outdated($archive_dir);
	for my $base (@to_test) {
		my @to_rebuild;
		if ($archive_reverse) {
			@to_rebuild = get_full_reverse($base, $available, $all_fulldeps);
		} else {
			@to_rebuild = get_full_reverse($base, $available, $all_fulldeps) if auto_reverse($base);
		}
		for my $rev (@to_rebuild) {
			push @rebuild_target, $rev;
			push @to_test, $rev if in $rev, @archived_names;
		}
	}
}

unless (@to_test) {
	if ($archive_rebuild) { say "All archived packages installed or up-to-date."; exit; }
	say "No testing to do.";
	say ("\nRequested:\n  ", join("\n  ", @ARGV)) unless $archive_rebuild;
	say ("\nUnsupported:\n  ", join("\n  ", @unsupported)) if @unsupported;
	say ("\nAlready Installed\n  ", join("\n  ", @already_installed)) if @already_installed;
	say ("\nMissing:\n  ", join("\n  ", @missing)) if @missing;
	say ("\nUse \"sbotest --single\" to test scripts that are already installed.") if @already_installed;
	exit;
}
@to_test = uniq(@to_test);
@to_test = @{ rationalize_queue([@to_test]) };
@rebuild_target = uniq(@rebuild_target) if @rebuild_target;

SECOND: for my $sbo (@to_test) {
	my $dir = get_sbo_location($sbo);
	# skip if unsupported
	unless (is_supported($dir)) {
		push @unsupported, $sbo;
		next SECOND;
	}
	# skip if blacklisted
	next SECOND if on_blacklist($sbo);
	chdir $dir;
	splice @concluded;
	my $queue = get_build_queue([$sbo], {});
	clean_packages($queue) unless $dry_run;
	install_archived($queue, $archive_dir, $pkg_dir, @to_test) unless $no_archive;
	if ($dry_run) {
		for my $cand (@$queue) {
			push @in_overrides, $cand if is_local($cand) and not in $cand, @to_reuse;
		}
	}
	# nothing past this point is needed in
	# --dry-run
	push @dry_run_list, $sbo;
	next SECOND if $dry_run;
	push @bad_lint, $sbo unless system('sbolint') == 0;
	# reinstall anything already built on this
	# test run...
	chdir $pkg_dir;
	my @to_reinstall;
	opendir(my $dh, $pkg_dir);
	PKG_CHECK: while (my $ls = readdir $dh) {
		next PKG_CHECK if $ls eq "." or $ls eq "..";
		my ($pkg_name, $pkg_version, $pkg_build) = get_package_info($ls);
		next PKG_CHECK unless defined $pkg_name;
		my $is_same = same_as_repo($pkg_name, $pkg_version, $pkg_build);
		# but not if the target itself has already
		# been built and does not need an automatic
		# rebuild; in that case, skip
		next SECOND if $pkg_name eq $sbo and $is_same and not in $pkg_name, @rebuild_target;
		next SECOND if $pkg_name eq $sbo and $is_same and in $pkg_name, @built;
		push @to_reinstall, $ls if in $pkg_name, @$queue and $is_same;
	}
	close $dh;
	if (@to_reinstall) {
		my $currently_installed = get_inst_names(get_installed_packages('SBO'));
		REINSTALL: for my $script (@to_reinstall) {
			# validity of package file name already done
			my ($script_name, $script_version, $script_build) = get_package_info($script);
			next REINSTALL if in $script_name, @$currently_installed or (in $script_name, @rebuild_target and not in $script_name, @built);
			script_error("upgradepkg failed.") unless system('/sbin/upgradepkg', '--reinstall', '--install-new', '--terse', $script) == 0;
		}
	}
	# run any required useradd and groupadd
	# commands
	UGCHECK: for my $item (@$queue) {
		my $location = get_sbo_location($item);
		my $readme = get_readme_contents($location);
		next UGCHECK unless defined $readme;
		my $cmds = get_user_group($readme, $location);
		if ($$cmds[0] and not user_group_exist(@$cmds)) {
			say "Adding user and group for $item...";
			system($_) for @$cmds;
		}
	}
	my ($res, $res0);
	my @lesser_queue;
	for my $dep (@$queue) { push @lesser_queue, $dep unless $dep eq $sbo; }
	$res0 = @lesser_queue ? system('sboinstall', '-o', '-L', $log_dir, '-k', $pkg_dir, '--batch', @lesser_queue) : 0;
	if ($res0 and @lesser_queue) {
		$res = $res0;
		push @queue_failed, $sbo;
	} else {
		$res = system('sboinstall', '-o', '-L', $log_dir, '-k', $pkg_dir, '-i', '-r', '-R', $sbo);
	}
	# this won't catch everything, but at least
	# it's something
	exit _ERR_INST_SIGNAL if $res == _ERR_INST_SIGNAL;
	unless ($res == 0) {
		push @fail_to_build, $sbo unless in $sbo, @queue_failed;
		if ($config{SO_CHECK} eq "TRUE") {
			my @post_test_installed = @{ get_installed_packages("SBO") };
			if (@post_test_installed) {
				my $post_test_pkg = +{ map {; $_->{name}, $_->{pkg} } @post_test_installed };
				my $pkg_count = @post_test_installed;
				say "Checking $pkg_count installed for missing shared objects...";
				for my $installed (keys %$post_test_pkg) {
					unless (solib_check($post_test_pkg->{$installed})) {
						say "Shared object dependencies missing for $installed.";
						push @solibs, "$sbo:" unless in "$sbo:", @solibs;
						push @solibs, "  $installed";
					}
				}
				print "\n";
			}
		}
	} else {
		push @built, $_ for @$queue;
	}
	# archive built packages; dependencies only by
	# default, or all with --archive-force; skip if
	# archive_dir and pkg_dir are the same
	next if $no_archive or $pkg_dir eq $archive_dir;
	chdir $pkg_dir;
	opendir($dh, $pkg_dir);
	while (my $ls = readdir $dh) {
		next if $ls eq '.' or $ls eq '..';
		my ($pkg_name, $pkg_version, $pkg_build) = get_package_info($ls);
		next unless defined $pkg_name;
		my $is_same = same_as_repo($pkg_name, $pkg_version, $pkg_build);
		if ($is_same and ($archive_force or not in $pkg_name, @to_test)) {
			unless (in $ls, @copied) {
				say "Archiving $ls.";
				push @copied, $ls;
				copy $ls, "$archive_dir/$ls";
			}
		}
	}
	close $dh;
}

if ($dry_run) {
	@to_reuse = uniq(sort(@to_reuse)) if @to_reuse;
	@to_remove = uniq(sort(@to_remove)) if @to_remove;
	@in_overrides = uniq(sort(@in_overrides)) if @in_overrides;
	@to_test = sort(@dry_run_list) if @dry_run_list;
	@already_installed = sort(@already_installed) if @already_installed;

	my $message = $archive_rebuild ? "Archive Rebuild Dry Run:" : "Dry Run:";
	say "$message";
	say ("\nRequested: ", join(" ", @ARGV)) if @ARGV;
	say ("\nMissing: ", join(" ", @missing)) if @missing;
	say ("\nUnsupported: ", join(" ", @unsupported)) if @unsupported;
	say ("\nAlready Installed: ", join(" ", @already_installed)) if @already_installed;
	say ("\nOverrides: ", join(" ", @in_overrides)) if @in_overrides;
	if (@to_reuse) {
		my $reuse_number = @to_reuse;
		say "\nTo reuse $reuse_number from $archive_dir.";
	}
	if ($archive_rebuild) {
		say ("\nScripts to rebuild:\n  ", join("\n  ", @dry_run_list)) if @dry_run_list;
		say ("\nTo remove from archive:\n  ", join("\n  ", @to_remove)) if @to_remove;
	} else {
		say ("\nScripts to test:\n  ", join("\n  ", @to_test)) if @to_test;
	}
	say ("\nUse \"sbotest --single\" to test scripts that are already installed.") if @already_installed;
	exit;
}

# for the last run only
clean_packages();

chdir $pkg_dir;
opendir(my $dh, $pkg_dir);
# run sbopkglint on the scripts in ARGV and their
# reverse dependencies
TESTING: while (my $ls = readdir $dh) {
	next TESTING if $ls eq "." or $ls eq "..";
	my ($pkg_name, $pkg_version, $pkg_build) = get_package_info($ls);
	next TESTING unless defined $pkg_name;
	next TESTING unless in $pkg_name, @to_test;
	next TESTING unless same_as_repo($pkg_name, $pkg_version, $pkg_build);
	my $log_name = "$log_dir/sbopkglint_$pkg_name";
	my $cmd = "( /usr/bin/sbopkglint $ls 2>&1; echo \$? > $log_dir/.res) | tee $log_name";
	system('bash', '-c', $cmd);
	my $res = slurp "$log_dir/.res";
	if ($res == 0) {
		push @successful, $pkg_name;
	} else {
		push @bad_pkg_lint, $pkg_name;
	}
}

unlink "$log_dir/.res" if -f "$log_dir/.res";
chdir $cwd;

@successful = uniq(sort(@successful)) if @successful;
@bad_pkg_lint = uniq(sort(@bad_pkg_lint)) if @bad_pkg_lint;
@queue_failed = uniq(sort(@queue_failed)) if @queue_failed;
my @requested = uniq(sort(@ARGV)) if @ARGV;

chomp(my $end_date = `/usr/bin/date`);

say ("\nRequested:\n  ", join("\n  ", @requested)) if @requested;
say ("\nSuccessful:\n  ", join("\n  ", @successful)) if @successful;
say ("\nMissing:\n  ", join("\n  ", @missing)) if @missing;
say ("\nFailed to Build:\n  ", join("\n  ", @fail_to_build)) if @fail_to_build;
say ("\nDependency Failed\n  ", join("\n  ", @queue_failed)) if @queue_failed;
say ("\nBad sbolint:\n  ", join("\n  ", @bad_lint)) if @bad_lint;
say ("\nBad sbopkglint:\n  ", join("\n  ", @bad_pkg_lint)) if @bad_pkg_lint;
say ("\nUnsupported:\n  ", join("\n  ", @unsupported)) if @unsupported;
say ("\nAlready Installed:\n ", join("\n ", @already_installed)) if @already_installed;
say ("\nMissing Solibs:\n  ", join("\n  ", @solibs)) if @solibs;
say ("\nUse \"sbotest --single\" to test scripts that are already installed.") if @already_installed;

unlink $logfile if -f $logfile;
open(my $fh, '>', $logfile);
error_code("\nNo log could be written; exiting.", _ERR_OPENFH) unless defined $fh;

my $label = $archive_rebuild ? "Archive update" : "Test";
say {$fh} "$label began: $start_date";
say {$fh} "$label ended: $end_date";
say {$fh} ("\nRequested:\n  ", join("\n  ", @requested)) if @requested;
say {$fh} ("\nSuccessful:\n  ", join("\n  ", @successful)) if @successful;
say {$fh} ("\nMissing:\n  ", join("\n  ", @missing)) if @missing;
say {$fh} ("\nFailed to Build:\n  ", join("\n  ", @fail_to_build)) if @fail_to_build;
say {$fh} ("\nDependency Failed:\n  ", join("\n  ", @queue_failed)) if @queue_failed;
say {$fh} ("\nBad sbolint:\n  ", join("\n  ", @bad_lint)) if @bad_lint;
say {$fh} ("\nBad sbopkglint:\n  ", join("\n  ", @bad_pkg_lint)) if @bad_pkg_lint;
say {$fh} ("\nUnsupported:\n  ", join("\n  ", @unsupported)) if @unsupported;
say {$fh} ("\nAlready Installed:\n ", join("\n ", @already_installed)) if @already_installed;
say {$fh} ("\nMissing Solibs:\n  ", join("\n  ", @solibs)) if @solibs;
say {$fh} ("\nUse \"sbotest --single\" to test scripts that are already installed.") if @already_installed;

close $fh;
say "\nLog written to $logfile.";

END { say ""; }
